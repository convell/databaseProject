CS 457 Programming Assignment 4 -- Design Documentation

Paul Marshall and Phoebe Argon
4/8/18

Design
======
The atomicity of PA 4 starts at the begin transaction section. This begin transaction flags the following code between "begin transaction" and "commit" as queded code in an array. The lock isnt created till update is called as selecting does not ruin the atomicity of the execution. Based off the table used in update, a lock is created under the following style: ./locks/tablename.lock. This lock is then checked for on commit, allowing for proper blocking of the database file in order to avoid data hazards. Running commit while a lock in places allows for the command to fail ellegantly.


Implementation
==============
The program uses "if" and "elif" statements in the main function to evaluate the input command.
It will evaluate the input string and then call a separate function to perform the request.
Since the last project, we have worked to make the program more modular. Rather than having one main function, multiple functions are now called.

All commands must end in ";" to execute properly, unless it is interpreted as a comment.
Invalid commands will be ignored so that the program does not terminate early.
The script handles all input no matter lower or uppercase.
For example, users can input "ALTER TABLE" or "alter table" and the program will handle it.

The program executes well by performing several try/catch statements and by performing checks specific to the function.
For example, a database has to exist before it can be deleted and a table has to exist before one can insert into it.


External libraries
==================
The script imports "OS" and "RE" for use in the program.
OS helps with modifying files within different selected paths.
RE handles the case insensitivity.
contextlib handles the overiding of the default file handler to allow for multiple table handling. 


How to execute
==============
Preconditions:
    - Access to two linux terminals
    - Python 2 installed on the machine
    - ArgonMarshall_p4.py and then type out commands found in PA4_test.sql on two seperate python instances

In a linux terminal:
Navigate to the folder containing ArgonMarshall_p4.py
Type "python ArgonMarshall_p4.py" to execute the script
